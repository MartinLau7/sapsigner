//
//   Generated by https://github.com/blacktop/ipsw (Version: , BuildCommit: )
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 14.4, SDK: 14.4, Tools: [ld (902.8), ld (854.1), ld (951.9)]
//    - LC_BUILD_VERSION:  Platform: macCatalyst, MinOS: 17.4, SDK: 17.4, Tools: [ld (902.8), ld (854.1), ld (951.9)]
//    - LC_SOURCE_VERSION: 7.4.38.1.3
//
#ifndef _AMSURLSession_h
#define _AMSURLSession_h

@import Foundation;

#include "AMSRequestEncoding-Protocol.h"
#include "AMSResponseDecoding-Protocol.h"
#include "AMSURLDelegateProxy.h"
#include "AMSURLHandling-Protocol.h"
#include "AMSURLProtocolDelegate-Protocol.h"
#include "AMSURLSecurityPolicy.h"
#include "os_unfair_lock_s.h"

@protocol OS_dispatch_queue;

@interface AMSURLSession : NSObject <NSURLSessionDataDelegate, NSURLSessionTaskDelegate> {
    /* instance variables */
    struct os_unfair_lock_s _propertiesLock;
}

@property (retain) AMSURLDelegateProxy *delegateProxy;
@property signed char invalidated;
@property (readonly) NSObject<OS_dispatch_queue> *lazyDataTaskCreationQueue;
@property (retain) AMSURLSecurityPolicy *securityPolicy;
@property (readonly) NSURLSessionConfiguration *configuration;
@property (weak) id <NSURLSessionDelegate, AMSURLProtocolDelegate> delegate;
@property (readonly) NSOperationQueue *delegateQueue;
@property (retain) id <AMSURLHandling> protocolHandler;
@property (retain) id <AMSRequestEncoding> requestEncoder;
@property (retain) id <AMSResponseDecoding> responseDecoder;
@property (readonly) NSURLSession *session;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)defaultSession;
+ (id)_taskFromSession:(id)session request:(id)request activity:(id)activity;
+ (id)imageSession;
+ (id)sharedAuthKitSession;

/* instance methods */
- (void)dealloc;
- (id)init;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (void)URLSession:(id)urlsession task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task willPerformHTTPRedirection:(id)httpredirection newRequest:(id)request completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task didFinishCollectingMetrics:(id)metrics;
- (id)dataTaskWithRequest:(id)request completionHandler:(id /* block */)handler;
- (id)initWithConfiguration:(id)configuration;
- (id)dataTaskWithRequest:(id)request;
- (void)invalidateAndCancel;
- (void)finishTasksAndInvalidate;
- (id)initWithConfiguration:(id)configuration delegate:(id)delegate delegateQueue:(id)queue;
- (void)_completeTaskWithTaskInfo:(id)info result:(id)result decodedObject:(id)object error:(id)error;
- (id)_createSharedDataForTask:(id)task properties:(id)properties completionHandler:(id /* block */)handler;
- (id)_formatError:(id)error task:(id)task decodedObject:(id)object;
- (id)_handleURLAction:(id)urlaction task:(id)task error:(id *)error;
- (id)_prepareRequest:(id)request properties:(id)properties error:(id *)error;
- (signed char)_protocolHandlerIsAMSImplementation;
- (void)_retryTask:(id)task action:(id)action error:(id *)error;
- (id)dataTaskPromiseWithRequest:(id)request;
- (id)dataTaskPromiseWithRequest:(id)request activity:(id)activity;
- (id)dataTaskPromiseWithRequestPromise:(id)promise;
- (id)dataTaskPromiseWithRequestPromise:(id)promise activity:(id)activity;
- (id)dataTaskWithRequest:(id)request activity:(id)activity completionHandler:(id /* block */)handler;
- (id)dataTaskWithRequest:(id)request signpostID:(unsigned long long)id activity:(id)activity completionHandler:(id /* block */)handler;
- (id)dataTaskWithRequest:(id)request signpostID:(unsigned long long)id completionHandler:(id /* block */)handler;

@end

#endif /* _AMSURLSession_h */
